#!/usr/bin/env sh

# 获取当前分支
CURRENT_BRANCH=$(git symbolic-ref --short HEAD)

# 如果是 master 分支
if [ "$CURRENT_BRANCH" = "master" ]; then
  # 获取最新的远程 tag
  git fetch --tags
  LATEST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "0.0.0")
  LATEST_VERSION=${LATEST_TAG#v}
  
  # 检查根目录版本号
  ROOT_VERSION=$(node -p "require('./package.json').version")
  if [ "$(node -p "require('semver').gt('$ROOT_VERSION', '$LATEST_VERSION')")" != "true" ]; then
    echo "❌ 错误：根目录版本号 $ROOT_VERSION 小于等于线上版本 $LATEST_VERSION"
    echo "请先运行 ./scripts/bump-version.sh 更新版本号"
    exit 1
  fi

  # 检查 web 应用版本号
  WEB_VERSION=$(node -p "require('./apps/web/package.json').version")
  if [ "$WEB_VERSION" != "$ROOT_VERSION" ]; then
    echo "❌ 错误：web 应用版本号 $WEB_VERSION 与根目录版本号 $ROOT_VERSION 不一致"
    echo "请先运行 ./scripts/bump-version.sh 更新版本号"
    exit 1
  fi

  # 检查 core 包版本号
  CORE_VERSION=$(node -p "require('./packages/core/package.json').version")
  if [ "$CORE_VERSION" != "$ROOT_VERSION" ]; then
    echo "❌ 错误：core 包版本号 $CORE_VERSION 与根目录版本号 $ROOT_VERSION 不一致"
    echo "请先运行 ./scripts/bump-version.sh 更新版本号"
    exit 1
  fi

  echo "✅ 所有项目版本号检查通过：$ROOT_VERSION"
fi 